;; -----------------------------------------------------


;; Testing "list", functions
["list"]
;=>[]
["list", 1, 2, 3]
;=>[1,2,3]


;; Testing if form
["if", true, 7, 8]
;=>7
["if", false, 7, 8]
;=>8
["if", true, ["+", 1, 7], ["+", 1, 8]]
;=>8
["if", false, ["+", 1, 7], ["+", 1, 8]]
;=>9
["if", null, 7, 8]
;=>8
["if", 0, 7, 8]
;=>8
["if", ["list", 1], 7, 8]
;=>7
["if", ["list", 1, 2, 3], 7, 8]
;=>7
["=", ["list"], null]
;=>false
["if", null, 8, 7]
;=>7


;; Testing basic conditionals
["=", 2, 1]
;=>false
["=", 1, 1]
;=>true
["=", 1, 2]
;=>false
["=", 1, ["+", 1, 1]]
;=>false
["=", 2, ["+", 1, 1]]
;=>true
["=", null, 1]
;=>false
["=", null, null]
;=>true

["<", 2, 1]
;=>false
["<", 1, 1]
;=>false
["<", 1, 2]
;=>true



;; Testing equality
["=", 1, 1]
;=>true
["=", 0, 0]
;=>true
["=", 1, 0]
;=>false

;;; Basic = is not recursive
;;;["=", ["list"], ["list"]]
;;;;=>true
;;;["=", ["list", 1, 2], ["list", 1, 2]]
;;;;=>true
;;;["=", ["list", 1], ["list"]]
;;;;=>false
;;;["=", ["list"], ["list", 1]]
;;;;=>false
;;;["=", 0, ["list"]]
;;;;=>false
;;;["=", ["list"], 0]
;;;;=>false


;; Testing builtin and user defined functions
["+", 1, 2]
;=>3
[ ["fn", ["a", "b"], ["+", "b", "a"]], 3, 4]
;=>7
[ ["fn", [], 4] ]
;=>4

[ ["fn", ["f", "x"], ["f", "x"]], ["fn", ["a"], ["+", 1, "a"]], 7]
;=>8


;; Testing closures
[ [ ["fn", ["a"], ["fn", ["b"], ["+", "a", "b"]]], 5], 7]
;=>12

["def", "gen-plus5", ["fn", [], ["fn", ["b"], ["+", 5, "b"]]]]
["def", "plus5", ["gen-plus5"]]
["plus5", 7]
;=>12

["def", "gen-plusX", ["fn", ["x"], ["fn", ["b"], ["+", "x", "b"]]]]
["def", "plus7", ["gen-plusX", 7]]
["plus7", 8]
;=>15


;;; See step7_interop for variable length arguments


;;;;; Testing language defined not function
;;;[not false]
;;;;=>true
;;;[not true]
;;;;=>false
;;;[not "a"]
;;;;=>false
;;;[not 0]
;;;;=>false


;; Testing basic do form

["do", ["def", "a", 6], 7, ["+", "a", 8]]
;=>14
"a"
;=>6

;;
;; See step7 tests for more in depth do form tests
;;

;; Testing recursive sumdown function
["def", "sumdown", ["fn", ["N"], ["if", ["<", 0, "N"], ["+", "N", ["sumdown", ["-", "N", 1]]], 0]]]
["sumdown", 1]
;=>1
["sumdown", 2]
;=>3
["sumdown", 6]
;=>21


;; Testing recursive fibonacci function
["def", "fib", ["fn", ["N"], ["if", ["=", "N", 0], 1, ["if", ["=", "N", 1], 1, ["+", ["fib", ["-", "N", 1]], ["fib", ["-", "N", 2]]]]]]]
["fib", 1]
;=>1
["fib", 2]
;=>2
["fib", 4]
;=>5
["fib", 10]
;=>89

;; Testing variable length arguments
[ ["fn", ["&", "args"], "args"], 1]
;=>[1]
[ ["fn", ["&", "args"], "args"], 1, 2, 3]
;=>[1,2,3]
[ ["fn", ["&", "args"], "args"] ]
;=>[]
[ ["fn", ["a", "&", "args"], "a"], 1, 2, 3]
;=>1
[ ["fn", ["a", "&", "args"], "args"], 1]
;=>[]

;;
;; See step7 tests for string quoting tests
;;

